# -*- coding: utf-8 -*-
"""Tokyo 2021 Olympics Data Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SHlqpRMAYltuBL6_IumQc47y3lOGaQly
"""

# First get kaggle.json api credential from kaggle account

# install and upgrade plotly, then restart runtime
!pip install --upgrade plotly

# Steps to download zip from kaggle and unzip
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d arjunprasadsarkhel/2021-olympics-in-tokyo
!unzip 2021-olympics-in-tokyo.zip

# install pyspark
!pip install pyspark

# import pyspark
import pyspark

# get access to spark
spark = pyspark.sql.SparkSession(pyspark.SparkContext())
spark

# Convert Excel files to csvs
import pandas as pd

def excel_to_csv(name):
  pd.read_excel(name + '.xlsx').to_csv(name + '.csv', sep=',', index=False)

excel_to_csv('Athletes')
excel_to_csv('Coaches')
excel_to_csv('EntriesGender')
excel_to_csv('Medals')
excel_to_csv('Teams')

# Read in Pandas dataframes
athletes = pd.read_csv('Athletes.csv')
coaches = pd.read_csv('Coaches.csv')
entries_gender = pd.read_csv('EntriesGender.csv')
medals = pd.read_csv('Medals.csv')
teams = pd.read_csv('Teams.csv')

# Show head of medals
medals.head()

# sort medals by total
medals.sort_values('Rank by Total', inplace=True)
medals.head()

# make bar chart of medals won by each country showing gold, silver and bronze
import plotly.express as px
fig = px.bar(medals, x='Team/NOC', y=['Gold', 'Silver', 'Bronze'], color_discrete_sequence =['gold', 'silver', 'brown'],title='Number of medals won by each country')
fig.show()

# show head of coaches
coaches.head()

# Add coaches to pyspark sql and make most basic query
spark.read.csv('Coaches.csv', header=True, inferSchema=True).createOrReplaceTempView('coaches')
spark.sql('select * from coaches').show(5)

# Obtain the count of coaches from each NOC (country)
pd_coaches_query = spark.sql('select NOC, count(NOC) as count from Coaches group by NOC').toPandas()
pd_coaches_query.head()

# Simple bar chart of coaches from each country
fig = px.bar(pd_coaches_query, x='NOC', y='count', title='Number of coaches from each country')
fig.show()

# Show head of athletes
athletes.head()

# Add athletes to pyspark sql
spark.read.csv('Athletes.csv', header=True, inferSchema=True).createOrReplaceTempView('athletes')

# Get count of each unique combination of NOC and Discipline
pd_athletes_query = spark.sql('''select first(NOC) as NOC, first(Discipline) as Discipline,
                                 count(*) Count from athletes group by NOC, Discipline order
                                 by NOC, Discipline''').toPandas()
pd_athletes_query.head(10)

# Bar chart of number of athletes split by discipline
fig = px.bar(pd_athletes_query, x='NOC', y='Count', color='Discipline', title='Number of athletes from each country per discipline')
fig.show()

# Show amount of each discipline
athletes['Discipline'].value_counts().head(10)

# Only keep rows with discipline in top 3
pd_athletes_query = pd_athletes_query.loc[pd_athletes_query['Discipline'].isin(['Athletics', 'Swimming', 'Football'])]
pd_athletes_query.head(5)

# Bar chart of number of athletes split by discipline
fig = px.bar(pd_athletes_query, x='NOC', y='Count', color='Discipline', title='Number of athletes from each country per discipline')
fig.show()

# Show head of entries_gender
entries_gender.head()

# Make a Pie chart for each discipline showing the percentage of males vs females in each discipline
from plotly.subplots import make_subplots
import plotly.graph_objects as go

specs = [[{'type':'domain'}, {'type':'domain'}]]*23
fig = make_subplots(rows=23, cols=2,
                    subplot_titles=entries_gender['Discipline'], specs=specs)
sub_figs = []
for index, row in entries_gender.iterrows():
  sub_fig = go.Pie(labels=['Female', 'Male'], values=[row['Female'],
                                                      row['Male']])
  sub_figs.append(sub_fig)

k=0
for i in range(1, 24):
  for j in range(1, 3):
    fig.add_trace(sub_figs[k], i, j)
    k+=1

fig.update_layout(showlegend=False, height=10000, width=800, title_text="Distribution of Gender amongst each game")
fig.update_traces(textposition='inside', textinfo='label+percent', hoverinfo='label+value+percent')

fig = go.Figure(fig)
fig.show()

# Exercise for teams
teams.head()

